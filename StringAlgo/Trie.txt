const int K = 26;
struct Node {
    int next[K];
    bool leaf = false;
    Node() {
        memset(next, -1, sizeof next);
    }
};
vector<Node> trie(1);
 
void add(string s) {
    int i = 0;
    for (auto ch : s) {
        int c = ch - 'a';
        if (trie[i].next[c] == -1) {
            trie[i].next[c] = (int) trie.size();
            trie.emplace_back();
        }
        i = trie[i].next[c];
    }
    trie[i].leaf = true;
}
 
bool prefixExist(string s) {
    int i = 0;
    for (auto ch : s) {
        int c = ch - 'a';
        if (trie[i].next[c] == -1) return false;
        i = trie[i].next[c];
    }
    return true;
}
///////////////////////////////////////////////////
string temp = "";
void dfs(int s) {
    Node curr = trie[s];
    if (curr.leaf) {
        cout << temp << endl;
    }
    for (int i = 0 ; i < K ; i++) {
        if (curr.next[i] == -1) continue;
        temp.push_back((char) (i + 'a'));
        dfs(curr.next[i]);
        temp.pop_back();
    }
}