const int K = 26;
struct Node {
    int to[K];
    int stop;
    Node() {
        memset(to, -1, sizeof to);
        stop = 0;
    }
};

struct Trie {
    vector<Node> t;

    Trie() { t.push_back(Node()); }

    void insert(string s) {
        int node = 0;
        for (auto ch : s) {
            int c = ch - 'a';
            if (t[node].to[c] == -1) {
                t[node].to[c] = t.size();
                t.push_back(Node());
            }
            node = t[node].to[c];
        }
        t[node].stop++;
    }

    int go_step(int node_idx, char ch) {
        int c = ch - 'a';
        if (t[node_idx].to[c] == 0) return -1;
        return t[node_idx].to[c];
    }
};
///////////////////////////////////////////////////
 
bool prefixExist(string s) {
    int i = 0;
    for (auto ch : s) {
        int c = ch - 'a';
        if (trie[i].next[c] == -1) return false;
        i = trie[i].next[c];
    }
    return true;
}
///////////////////////////////////////////////////
string temp = "";
void dfs(int s) {
    Node curr = trie[s];
    if (curr.leaf) {
        cout << temp << endl;
    }
    for (int i = 0 ; i < K ; i++) {
        if (curr.next[i] == -1) continue;
        temp.push_back((char) (i + 'a'));
        dfs(curr.next[i]);
        temp.pop_back();
    }
}