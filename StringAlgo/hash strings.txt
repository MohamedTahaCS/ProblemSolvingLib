					String Hashing
// int shout be long long 
int comput_hash(string const& s)
{
    const int p=31 , m = 1e9+9 ;
    int hash_val = 0 , p_val=1 ;
    for (char c:s)
    {
        hash_val = ( hash_val + (c-'a'+1) * p_val )%m ;
        p_val = (p_val * p) %m ;
    }
    return hash_val ;
}
vector< vector<int> > group_same_strings(vector<string> const& s)//n*m+logn hash.first should LL
{
    int n = s.size() ;
    vector<pair<int,int>> hash(n) ;
    for (int i=0 ; i<n ; i++) hash[i] = {comput_hash(s[i]), i} ;
    sort(hash.begin(),hash.end()) ;
    vector< vector<int> > groups ;
    for (int i=0 ; i<n ; i++)
    {
        if (i==0 || hash[i].first==hash[i-1].first)
        {
            groups.emplace_back() ;
        }
        groups.back().push_back(hash[i].second) ;
    }
    return groups ; 
}
/////////////////////////////////////////////////////////////////////////////////////////////////
				Substring Hashing in O(1)
const int mod = 1e9+7 ;
long long fpow(long long a, long long b, long long m)
{
    a %= m;
    long long res = 1;
    while (b)
    {
        if (b & 1)  res = res * a % m;
        a = a * a % m;
        b >>= 1;
    }
    return res;
}
int dp[1000001] , inv[1000001] ;
int comput_hash(string const& s)
{
    const int p=31 , m = 1e9+7 ;
    int hash_val = 0 , p_val=1 ;
    for (int i=0; i<s.size() ; i++)
    {
        hash_val = ( hash_val + (s[i]-'a'+1) * p_val )%m ;
        dp[i]=hash_val ; inv[i]=fpow(p_val,mod-2,mod) ;
        p_val = (p_val * p) %m ;
    }
    return hash_val ;
}
int rangehash(int l , int r)
{
    int res = dp[r] ;
    if (l!=0) res = (res - dp[l-1]+mod)%mod ;
    res = (res * inv[l])%mod ;
    return res ;
}
//////////////////////////////////////////////////////////////////////////////////////////////////
		Determine the number of different substrings in a string  big o(n^2 * logn
int count_unique_substrings(string const& s) {
    int n = s.size();

    const int p = 31;
    const int m = 1e9 + 9;
    vector<long long> p_pow(n);
    p_pow[0] = 1;
    for (int i = 1; i < n; i++)
        p_pow[i] = (p_pow[i-1] * p) % m;

    vector<long long> h(n + 1, 0);
    for (int i = 0; i < n; i++)
        h[i+1] = (h[i] + (s[i] - 'a' + 1) * p_pow[i]) % m;

    int cnt = 0;
    for (int l = 1; l <= n; l++) {
        set<long long> hs;
        for (int i = 0; i <= n - l; i++) {
            long long cur_h = (h[i + l] + m - h[i]) % m;
            cur_h = (cur_h * p_pow[n-i-1]) % m;
            hs.insert(cur_h);
        }
        cnt += hs.size();
    }
    return cnt;
}
//////////////////////////////////////////////////////////////////////////////////////////////////
vector<int> rabin_karp(string const& s, string const& t) {
    const int p = 31; 
    const int m = 1e9 + 9;
    int S = s.size(), T = t.size();

    vector<long long> p_pow(max(S, T)); 
    p_pow[0] = 1; 
    for (int i = 1; i < (int)p_pow.size(); i++) 
        p_pow[i] = (p_pow[i-1] * p) % m;

    vector<long long> h(T + 1, 0); 
    for (int i = 0; i < T; i++)
        h[i+1] = (h[i] + (t[i] - 'a' + 1) * p_pow[i]) % m; 
    long long h_s = 0; 
    for (int i = 0; i < S; i++) 
        h_s = (h_s + (s[i] - 'a' + 1) * p_pow[i]) % m; 

    vector<int> occurences;
    for (int i = 0; i + S - 1 < T; i++) { 
        long long cur_h = (h[i+S] + m - h[i]) % m; 
        if (cur_h == h_s * p_pow[i] % m)
            occurences.push_back(i);
    }
    return occurences;
}