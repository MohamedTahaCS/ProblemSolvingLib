					String Hashing
///////////////////////////////////////////////////////////////////////////////////////////////////////
				Substring Hashing in O(1)
struct Hash {
    ll n, p, m;
    vector<ll> dp[2];
    vector<ll> inv, p_pow;
 
    Hash() {}
    Hash(string& s, ll p = 9973, ll m = 1e9 + 9) : n(s.size()), p(p), m(m), inv(n), p_pow(n) {
        p_pow[0] = 1;
        for (int i = 1; i < n; ++i) p_pow[i] = p_pow[i - 1] * p % m;
        inv[n - 1] = power(p_pow[n - 1], m - 2);
        for (int i = n - 2; i >= 0; --i) inv[i] = inv[i + 1] * p % m;
 
        for (int f : {0, 1}) { // 0 only if reverse not matter
            dp[f].resize(n);
            for (ll hash_val = 0, i = 0; i < n; ++i) {
                int idx = f ? n - i - 1 : i;
                dp[f][i] = hash_val = (hash_val + s[idx] * p_pow[i] % m) % m;
            }
        }
    }
 
    ll power(ll a, ll b) {
        if (b == 0) return 1;
        if (b & 1) return power(a, b - 1) * a % m;
        ll res = power(a, b/2);
        return res * res % m;
    }
 
    ll get(int l, int r, bool f = 0) {
        ll res = dp[f][r] % m;
        if (l > 0) res = ((res - dp[f][l - 1])%m + m) % m;
	    if (res < 0) res += m;
        return res * inv[l] % m;
    }
 
    ll get_rev(int l, int r) {
        return get(n - 1 - r, n - 1 - l, 1);
    }
};
 
struct DoubleHash {
    Hash x, y;
 
    DoubleHash() {}
    DoubleHash(string& s) : x(s, 31, 1e9 + 7), y(s, 29, 1e9 + 9) {}
 
    pair<ll, ll> get(int l, int r) {
        return {x.get(l, r), y.get(l, r)};
    }
 
    pair<ll, ll> get_rev(int l, int r) {
        return {x.get_rev(l, r), y.get_rev(l, r)};
    }
};

///////////////////////////////////////////////////////////////////////////////////////////////////////
// with change idx 
struct Hash {
    ll n, p, m;
    BIT dp[2]; // bit should be zero base
    vector<ll> inv, p_pow;
 
    Hash() {}
    Hash(string& s, ll p = 9973, ll m = 1e9 + 9) : p(p), m(m), n(s.size()), inv(n) {
        p_pow.resize(n, 1);
        for (int i = 1; i < n; ++i) p_pow[i] = p_pow[i - 1] * p % m;
        inv[n - 1] = power(p_pow[n - 1], m - 2);
        for (int i = n - 2; i >= 0; --i) inv[i] = inv[i + 1] * p % m;
 
        for (int f : {0, 1}) { // 0 only if reverse not matter
            dp[f] = BIT(n);
            for (ll hash_val = 0, i = 0; i < n; ++i) {
                int idx = f ? n - i - 1 : i;
                dp[f].add(i, s[idx] * p_pow[i] % m);
            }
        }
    }
 
    void change_char(int i, char ch) {
        for (int f : {0, 1}) {
            int idx = f ? n - i - 1 : i;
            dp[f].add(idx, -1 * dp[f].getValue(idx, idx));
            dp[f].add(idx, ch * p_pow[idx] % m);
        }
    }
 
    ll power(ll a, ll b) {
        if (b == 0) return 1;
        if (b & 1) return power(a, b - 1) * a % m;
        ll res = power(a, b/2);
        return res * res % m;
    }
 
    ll get(int l, int r, bool f = 0) {
        ll res = dp[f].prefix(r);
        if (l > 0) res = ((res - dp[f].prefix(l - 1))%m + m) % m;
	if (res < 0) res += m;
        return res * inv[l] % m;
    }
 
    ll get_rev(int l, int r) {
        return get(n - 1 - r, n - 1 - l, 1);
    }
};

///////////////////////////////////////////////////////////////////////////////////////////////////////
vector< vector<int> > group_same_strings(vector<string> const& s)//n*m+logn hash.first should LL
{
    int n = s.size() ;
    vector<pair<int,int>> hash(n) ;
    for (int i=0 ; i<n ; i++) hash[i] = {comput_hash(s[i]), i} ;
    sort(hash.begin(),hash.end()) ;
    vector< vector<int> > groups ;
    for (int i=0 ; i<n ; i++)
    {
        if (i==0 || hash[i].first==hash[i-1].first)
        {
            groups.emplace_back() ;
        }
        groups.back().push_back(hash[i].second) ;
    }
    return groups ; 
}
/////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////
		Determine the number of different substrings in a string  big o(n^2 * logn
int count_unique_substrings(string const& s) {
    int n = s.size();

    const int p = 31;
    const int m = 1e9 + 9;
    vector<long long> p_pow(n);
    p_pow[0] = 1;
    for (int i = 1; i < n; i++)
        p_pow[i] = (p_pow[i-1] * p) % m;

    vector<long long> h(n + 1, 0);
    for (int i = 0; i < n; i++)
        h[i+1] = (h[i] + (s[i] - 'a' + 1) * p_pow[i]) % m;

    int cnt = 0;
    for (int l = 1; l <= n; l++) {
        set<long long> hs;
        for (int i = 0; i <= n - l; i++) {
            long long cur_h = (h[i + l] + m - h[i]) % m;
            cur_h = (cur_h * p_pow[n-i-1]) % m;
            hs.insert(cur_h);
        }
        cnt += hs.size();
    }
    return cnt;
}
//////////////////////////////////////////////////////////////////////////////////////////////////
vector<int> rabin_karp(string const& s, string const& t) {
    const int p = 31; 
    const int m = 1e9 + 9;
    int S = s.size(), T = t.size();

    vector<long long> p_pow(max(S, T)); 
    p_pow[0] = 1; 
    for (int i = 1; i < (int)p_pow.size(); i++) 
        p_pow[i] = (p_pow[i-1] * p) % m;

    vector<long long> h(T + 1, 0); 
    for (int i = 0; i < T; i++)
        h[i+1] = (h[i] + (t[i] - 'a' + 1) * p_pow[i]) % m; 
    long long h_s = 0; 
    for (int i = 0; i < S; i++) 
        h_s = (h_s + (s[i] - 'a' + 1) * p_pow[i]) % m; 

    vector<int> occurences;
    for (int i = 0; i + S - 1 < T; i++) { 
        long long cur_h = (h[i+S] + m - h[i]) % m; 
        if (cur_h == h_s * p_pow[i] % m)
            occurences.push_back(i);
    }
    return occurences;
}