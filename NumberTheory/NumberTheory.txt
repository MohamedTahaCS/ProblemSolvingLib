				Sieve nloglogn range 1 to 1e7 
vector<bool> sieve () 
{
    const int mx = 1e7+10 ;
    vector <bool> prime(mx+1,true) ;
    prime[0] = prime[1] = false ;

    // You can go until sqrt(mx) for better performance
    for (int i = 2; i <= mx ; i++)
    {
        if (prime[i] )
        {
            for (int j = i * i; j <= mx; j += i) prime[j] = false ;
        }
    }
    return prime ;
}

///////////////
bool isPrime(ll x) {
    if (x < 2) return false;
    for (ll d = 2; d * d <= x; d++) {
        if (x % d == 0)
            return false;
    }
    return true;
}
////////////////////////////////////////////////////////////////////////////////////////
				Prime Factorization sqrt(n)
vector<int> getPrimeFact(int n)
{
    vector<int> primeFact;
    for (int i = 2; i*i<=n ; i++)
    {
        int cnt=0 ;
        if (n%i==0)
        {
            while (n % i == 0)
            {
                cnt++;
                n = n / i;
            }
            cout << i << "^" << cnt << " ";
            primeFact.push_back(i);
        }
    }
    if (n > 1) {
        cout<<n<<"^"<<1 ;
        primeFact.push_back(n);
    }
    return primeFact;
}
/////////////////////////////////////////////////////////////////////////////////////////
			     Prime Factorization with sieve nlogn range
struct Seive {
    const int N = 1e7;
    vi prime; // prime
    Seive() {
        prime = vi (N, -1);
        for (int i = 2 ; i <= N ; i++) {
            if (prime[i] == -1) {
                prime[i] = i;
                for (int x = i ; x <= N ; x += i)
                    prime[x] = i;
            }
        }
    }
    vector<pii> getPrimeFact(int x) {
        vector<pii> ret;
        while(x != 1) {
            int cnt = 0;
            int p = prime[x];
            while(x % p == 0) {
                cnt++;
                x = x / p;
            }
            ret.push_back({p, cnt});
        }
        return ret;
    }
};
/////////////////////////////////////////////////////////////////////////////////////////
						Divisor Analysis 
from Prime Fact  p0 ^ k0 * p1 ^ k1 * ....
{
    ll div_cnt = 1, div_sum = 1, div_prod = 1, div_cnt2 = 1;
    ll p[n], k[n];
    for (int i = 0; i < n; i++) {
        cin >> p[i] >> k[i];
        div_cnt = div_cnt * (k[i] + 1) % MOD;
        div_sum = div_sum * (expo(p[i], k[i] + 1) - 1) % MOD * expo(p[i] - 1, MOD - 2) % MOD;
        div_prod = expo(div_prod, k[i] + 1) * expo(expo(p[i], (k[i] * (k[i] + 1) / 2)), div_cnt2) % MOD;
        div_cnt2 = div_cnt2 * (k[i] + 1) % (MOD - 1);
    }
    cout << div_cnt << ' ' << div_sum << ' ' << div_prod;
}
////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
				Euler(phi) in sqrt(n) // count->gcd(n,i)=1 
int Euler(int n)	
{
    int res = n ;
    for (int i=2 ; i*i<=n ; i++)
    {
        if (n%i==0)
        {
            while(n%i==0) n=n/i ;
            res = res-res/i ;
        }
    }
    if (n>1) res = res - res/n ;
    return res ;
}
/////////////////////////////////////////////////////////////////////////////////////////////
				Euler's totient function nloglong n  range 
// phi[x] = number of intergers i<=x are co prime to x -> gcd(x,i) = 1 
vector<int> phi ;
void Euler()
{
    int mx = 1e6+10;
    phi.resize(mx+1) ;
    for (int i=0 ; i<=mx ; i++) phi[i]=i ;
    for (int i=2 ; i<=mx ; i++)
    {
        if (phi[i]==i)
        {
            for (int j=i ; j<=mx ; j+=i)
            {
                phi[j]=phi[j]-phi[j]/i ;
            }
        }
    }
}
/////////////////////////////////////////////////////////////////////////////////////////////
void printDivisors(int n) // sqrt(n) ; 
{
    // Note that this loop runs till square root
    for (int i=1; i<=sqrt(n); i++)
    {
        if (n%i == 0)
        {
            // If divisors are equal, print only one
            if (n/i == i)
                printf("%d ", i);
 
            else // Otherwise print both
                printf("%d %d ", i, n/i);
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////////
int fib(int n)
{
    double phi = (1 + sqrt(5)) / 2;
    return round(pow(phi, n) / sqrt(5));
}
//////////////////////////////////////////////////////////////////////////////////////////////
vector<char> segmentedSieve(long long L, long long R) {
    // generate all primes up to sqrt(R)
    long long lim = sqrt(R);
    vector<char> mark(lim + 1, false);
    vector<long long> primes;
    for (long long i = 2; i <= lim; ++i) {
        if (!mark[i]) {
            primes.emplace_back(i);
            for (long long j = i * i; j <= lim; j += i)
                mark[j] = true;
        }
    }

    vector<char> isPrime(R - L + 1, true);
    for (long long i : primes)
        for (long long j = max(i * i, (L + i - 1) / i * i); j <= R; j += i)
            isPrime[j - L] = false;
    if (L == 1)
        isPrime[0] = false;
    return isPrime;
}

vector<char> segmentedSieveNoPreGen(long long L, long long R) {
    vector<char> isPrime(R - L + 1, true);
    long long lim = sqrt(R);
    for (long long i = 2; i <= lim; ++i)
        for (long long j = max(i * i, (L + i - 1) / i * i); j <= R; j += i)
            isPrime[j - L] = false;
    if (L == 1)
        isPrime[0] = false;
    return isPrime;
}

///////////// triangle Area //////
int calcArea(pair<int, int> a, pair<int, int> b, pair<int, int> c) {
    int x1 = a.first, y1 = a.second;
    int x2 = b.first, y2 = b.second;
    int x3 = c.first, y3 = c.second;

    return abs( x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) );
}
/////////////////////////////////////

class GfG
{
 
    // Function to maximize the value
    // of x such that n! % (k^x) = 0
    public:
    int findX(int n, int k)
    {
        int r = n, v, u;
 
        // Find square root of k and add 1 to it
        int m = sqrt(k) + 1;
 
        // Run the loop from 2 to m and k
        // should be greater than 1
        for (int i = 2; i <= m && k > 1; i++) {
            if (i == m) {
                i = k;
            }
 
            // optimize the value of k
            for (u = v = 0; k % i == 0; v++) {
                k /= i;
            }
 
            if (v > 0) {
                int t = n;
                while (t > 0) {
                    t /= i;
                    u += t;
                }
 
                // Minimum store
                r = min(r, u / v);
            }
        }
 
        return r;
    }
};
