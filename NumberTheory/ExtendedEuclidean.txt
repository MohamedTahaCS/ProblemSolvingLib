array<int, 3> gcd(int a, int b) {
    array<int, 3> x = {1, 0, a};
    array<int, 3> y = {0, 1, b};
    while(y[2] > 0) {
        int k = x[2] / y[2];
        for (int i = 0 ; i < 3 ; i++) x[i] -= k * y[i];
        swap(x, y);
    }
    return x; // x[0] * a + x[1] * b = x[2]  note: x[2] = gcd(a, b)
}

struct Eq {
    bool ok;
    int x, y;
    Eq(int a, int b) {find(a, b, __gcd(a, b));}
    Eq(int a, int b, int c) {find(a, b, c);}
    void find(int a, int b, int c) {
        auto v = gcd(a, b);
        int g = v[2];
        if (c % g != 0) ok = false;
        else {
            ok = true;
            x = v[0] * (c / g);
            y = v[1] * (c / g);
        }
    }
};


ll inv(ll a, ll b = 1e9 + 7) {
	array<int, 3> x = gcd(a, b);
	assert(x[2] == 1);  // gcd must be 1
	return x[0] + (x[0] < 0) * b;
}

///////////////////////////////////////////////
///////////////////////////////////////////////
A Diophantine equaltion is an equation in which only
integer solutions are allowed
ax + by = c is a linear Diophantine equation in tow var x , y

ax + by = c have solution if and only if  c % gcd(a,b) = 0
why this is true ?  because I know the answer of x and y if ax + by = gcd(a,b) from Extended Euclid algo
so if (c % gcd) I can easly generate multiply all equation by (c/gcd)


////////////////////////////////////////////////
Bezout's indentity
a * x + b * y = c // not gcd
12 * -10 + 42 * 3 = 6;
12 * -3  + 42 * 1 = 6;
12 * 4   + 42 * -1 = 6;
12 * 18  + 42 * -5 = 6;
12 * 11  + 42 * -3 = 6; // wow it's true
gcd(12, 42) = 2
( X = x + k * (b/gcd) , Y = y - k * (a/gcd) )

only two pairs will be
// abs(x) < abs(b/gcd) , abs(y) < abs(a/gcd)
////////////////////////////////////////////////

// solves the equation  ax congruent(---) b (mod n)
vector<ll> modularEquation(ll a, ll b, ll n) {
    vector<ll> sols;
    ll x , y , g;
    g = extendedEuclid(a, n, x, y);
    if (b % g != 0) return sols; // no solutions
    x = ((x * b / g) % n + n) % n; // from LDE
    for (int i = 0 ; i < g ; i++) // Bezout's identity
        sols.push_back( (x + i * n / g) % n );  
    sort(sols.begin(), sols.end());
    return sols;
}