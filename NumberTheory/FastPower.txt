// return (a ^ b) % m  o(log b)
ll power(ll a, ll b, ll m) {
    a %= m;
    ll res = 1;
    while(b) {
        if (b & 1) res = res * a % m;
        a = a * a % m;
        b >>= 1;
    }
    return res;
}
// if m is prime we can speed up this algo by calc a ^ (b mod (m-1)) instead of a ^ b
// from Fermat's little theorem
// a^b^c = power(a, power(b, c, MOD - 1) , MOD)
////////////////////////////////////////////////////////////////////////////
// recursive
int fpow(int n , int x , int m )
{
    if (x==0) return 1 ;
    int res = fpow(n,x/2,m) ;
    res = (res * res)%m ;
    if (x%2==0) return res ;  // a pow n  = ( a pow n/2 ) * ( a pow n/2 )
    else return (res*n)%m ;
}
/////////////////////////////////////////////////////////////////////////////