bit<1000> mask        big o(1000/(32 or 64));

Number of leading zeroes: builtin_clz(x)
Number of trailing zeroes : builtin_ctz(x)
Number of 1-bits: __builtin_popcount(x) 

in hamming distance I need just to use bitset


use this when you need to make bitset.count() faster 
#pragma GCC target("popcnt")


(mask1 & mask2).count  good than builtin_popcount(mask1 & mask2) because this need to cast so if size greater > 64 (can't)

Remove Last bit ( first bit from right) 011100 -> 011000  // num = num - (num & (-num))

replace all trailing 1 bits in the binary representation with 0 bits -> num & (num+1)

/////////////////////////////////////////////////////////////////////////////////////////
// Direct XOR of all numbers from 1 to n
int computeXOR(int n)
{
    if (n % 4 == 0)
        return n;
    if (n % 4 == 1)
        return 1;
    if (n % 4 == 2)
        return n + 1;
    else
        return 0;
}
/////////////////////////////////////////////////////////////////////////////////////////
int xoorfrom1ton(int n) // 1^2^3^4^5...^n 
{
    if (n%4==0) return n ;
    if (n%4==1) return 1 ;
    if (n%4==2) return n+1 ;
    if (n%4==3) return 0 ;
    //return 0 ;
}
int xoorevenfrom1ton(int n) // 2 ^ 4 ^ 6 ^ 8 ^ .  .  . . ^ n 
{
    return 2 * (xoorfrom1ton(n/2)) ;
}
///////////////////////////////////////////////////////////////////////////////////////
int or_range(int a, int b) { // a ^ a+1 ^ a+2 ^ .. ^ b
    if (a == b) return a;
    bitset<32> mask = a;
    bitset<32> mask2 = b;
    for (int i = 31 ; i >= 0 ; i--) {
        if (mask[i] != mask2[i]) {
            return mask.to_ullong() | mask2.to_ullong() | ((1 << i) - 1);
        }
    }
    return -1;
}