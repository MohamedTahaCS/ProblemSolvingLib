// product role -> how many way to make string of len n from k chars = k * k * ... * k = k^n
// division role -> how many perm of {1, 2, 1, 2, 2} = 4! / (2! * 3!)

// ways of choose
// perm without allowed rep P(n, k) = n! / (n-k)!
// perm with allowed rep PwithR(n, k) = k ^ n
// comb without allowed rep C(n, k) = P(n, k) / k! = n! / ( (n-k)! * k! )

// *
// comb with rep CwithR(n, k) note that k may > n -> another story -> set {a, b, c, d} with N elements
// each object can be selected more than once
// so if k = 3 -> {a, a, b} , {a, b, b} , {b, c, d} valid solutions
// {a, a, b} same as {a, b, a} so there's no perm / only combinations will be counted
// Note that the following are equivalent :
// 1- the number of combinations of n objects taken k at a time with rep
// 2- the number of ways when K identical objects can be distributed among n distinct containers
// 3- the number of none negative integer solutions of the equation:
//               x1 + x2 + ..... + xn = k
//                 a + b + c + d = x
// Instead of using numbers for writing the solutions, we will use strokes :
// || + | + |||
// now solution is an arrangement of K strokes | and n-1 pluses +
// so if n = 3 and k = 7 will be representing as :
// | | | + | | + | |
// so solutions = number of perm and because there is repeated chars we will use division role
// = (7 + 2)! / ( 2! * 7!)
// the general solution is :
// (k + n - 1)! / (k! * (n - 1)!)                 // note that k > n
// or nCr(K+N-1, K)

//////////////////////////////////-----------------//////////////////////////////////
struct Combinatorics {
    const ll MOD = 1e9 + 7;
    ll N = 5e6;
    vector<ll> fact;

    Combinatorics () {
        fact.resize(N);
        fact[0] = 1;
        for(int i = 1 ; i < N ; i++){
            fact[i] = fact[i-1] * i % MOD;
        }
    }

    ll fpow(ll a, ll b) {
        a %= MOD;
        ll res = 1;
        while (b) {
            if (b & 1)  res = res * a % MOD;
            a = a * a % MOD;
            b >>= 1;
        }
        return res;
    }

    ll inv(ll a) {
        return fpow(a, MOD - 2);
    }

    ll nPr(ll n, ll k) {
        if(k < 0 || n < k) return 1 ;
        return fact[n] * inv(fact[n - k]) % MOD;
    }

    ll nPrWithRep(ll n, ll k) {
        return fpow(k, n);
    }

    ll nCr(ll n, ll k) {
        if(k < 0 || n < k) return 0 ;
        ll ret = fact[n] * inv(fact[n - k]) % MOD;
        ret = ret * inv(fact[k]) % MOD;
        return ret;
    }

    ll nCrWithRep(ll n, ll k) {
        // x0 + x1 + ... + xn = k
        // ||| + || + |||| = k      fr[|] = k   fr[+] = n-1
        // nCr(k + n - 1, n - 1) = nCr(k + n - 1, k)
        return nCr(k + n - 1, k);
    }
};
/////////////////////////////////////////////////////////////////////////////////////////////
						// Partitions
// partition set with N elements into k groups

// if size of each group is known
// partition 6 friends into 3 groups each with size {3, 2, 1} friends
// group = [2,3] same as group [3, 2]
// pick 3 for 1st group = nCr(6, 3)      remains = 6 - 3 = 3;
// pick 2 for 2st group = nCr(3, 2)      remains = 3 - 2 = 1;
// pick 1 for 3st group = nCr(1, 1)      remains = 1 - 1 = 0;
// so number of ways = nCr(6, 3) * nCr(3, 2) * nCr(1, 1)
// = 6! / (3! * 2! * 1!)  like perm and div role
// what about if
// partition 18 into 5 groups {5, 5, 5, 2, 1}
// if order matter {g1[2, 3],g2[4, 5]} not same {g1[4, 5],g2[2, 3]}
// ans = 18 / (5!*5!*5!*2!*1!)
// if order not matter so because fr[5] = 3
// ways = ans / 3!

// if size of each group is not known
// or number of ways to partition a set into k subsets
// how many ways to partition 5 into k (none empty) groups
// how many ways of partition 5 into 3 groups
// dp recurrence    from stirling2
// f(n, k) = k * f(n - 1, k) + f(n - 1, k)
// bases: (n == k : 1) (k == 1 : 1);

// if partition n whatever number of groups
// = summation of stirling2(n, 0 to k);

// partition n into non-increasing seq of positive integers p1, p2, p3, ..., pk whose sum is n
// use dp

/////////////////////////////////////////////////////////////////////////////////////////////
// Count number of ways to partition a set of size n into k subsets or groups
vvi dp(1000, vi(1000, -1));
ll stirling(ll n, ll k) {
    if (k == 1) return n;
    if (n == k) return 1;
    if (dp[n][k] != -1) return dp[n][k];

    ll ret = 0; // previous may k - 1 groups or k groups
    ret += stirling(n - 1, k - 1) ;  // if k-1 just add curr to new group
    ret += stirling(n - 1, k) * k ;  // if k add curr to any group
    return dp[n][k] = ret;
}

// if i need partition whatever subsets or groups = summation of stirling (n, 1 to n) is called Bell Number
// Bell seq -> 1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147
/////////////////////////////////////////////////////////////////////////////////////////////
// pascal triangle
// this triangle has many patterns
//               1              1
//             1   1            2
//            1  2  1           4
//           1  3  3  1         8
//          1  4  6  4  1       16
//         1  5 10 10  5  1     32
// each row represent combination
//   1  4  6  4  1 ->         4C0 , 4C1 , 4C2 , 4C3 , 4C4
//  1  5 10 10  5  1 ->     5C0  5C1   5C2   5C3   5C4   5C5
//  by pascal's identity 5C2 = 4C1 + 4C2

vvi pascal; // pascal[n][r] = nCr
void build(int n) {
    pascal.resize(n + 1);
    for (int r = 0 ; r <= n ; r++) {
        pascal[r].resize(r + 1);
        pascal[r][0] = pascal[r][r] = 1;
        for (int c = 1 ; c < r ; c++)
            pascal[r][c] = pascal[r-1][c-1] + pascal[r-1][c];
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////
vvi dp(50, vi(100));
// dp[i][j] = how many way can choose j from i
// dp[i][j] = dp[i-1][j-1] or dp[i-1][j];
for (int i = 0 ; i < 50 ; i++) {
    for (int j = 0 ; j < 100 ; j++) {
        if (j == 0) dp[i][j] = 1;
        else if (i == 0) dp[i][j] = 0;
        else {
            dp[i][j] += dp[i-1][j];  // number of ways to choose all j from previous elements 
            dp[i][j] += dp[i-1][j-1]; // number of ways to choose (j - 1) from pre and add curr 
        }
    }
}
dp[n][k] = pascal[n][k] = nCk
/////////////////////////////////////////////////////////////////////////////////////////////
				combination with repetition
// {1,2} -> [1,1] , [1,2] , [2,2] if choice r=2 from n=2 
// {1,2} -> [1] , [2] if choice r=1 from n=2 
vector<int> fact ;   // fact.size should be 2*N 
int cc(int n , int r )
{
    int up = fact[n+r-1] ;
    int down = (fact[r] * fact[n-1]) %mod ;
    int invers = fpow(down,mod-2,mod) ;
    return (up * invers)%mod ;
}
/////////////////////////////////////////////////////////////////////////////////////////////
	   Find maximum power of a number (k) that divides a factorial (fact!)%(k^x)=0 ;
// functions return x not k^x ;
int findPowerPrime(int fact , int k )  // fact = 5 so 1*2*3*4*5  // k is prime
{
    int res = 0 ;
    while(fact)
    {
        fact = fact / k ;
        res += fact ;
    }
    return res ;
}
int findPowerComposite(int fact , int n ) // n is not prime n = p1^x * p2^y * p3^z
{
    int res = INT_MAX ;
    for (int i=2 ; i*i<=n ; i++)
    {
        if (n%i==0)
        {
            int count = 0;
            if (n % i == 0)
            {
                n = n / i;
                count++;
            }
            res = min(res, findPowerPrime(fact, i) / count) ;
        }
    }
    if (n>1) res = min(res,findPowerPrime(fact,n)) ;
    return res ;
}
//////////////////////////////////////////////////////////////////////////////////////////////
				combination without mod - without rep 
int C(int n, int k)
{
    double res = 1;
    for (int i = 1; i <= k; ++i)
        res = res * (n - k + i) / i;
    return (int)(res + 0.01);
}
//////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
in , ex 
/// |sum i to n (k/v[i])| - |sum i , j to n  k / v[i]*v[j]|  + .............. 
int n , k  ;
vector<int> v ;
int solve(int i , int take , int x)
{
    if (i==n)
    {
        if (take==0) return 0 ;
        if (take%2==0) return -1*(k/x) ;
        return (k/x) ;
    }
    int ch1=solve(i+1,take, x ) , ch2=0 ;
    if (k/v[i]>=x) ch2=solve(i+1,take+1 , x * v[i] ) ;
    return ch1+ch2 ;
}
////////////////////////////////////////////////////////////////////////////////////////////////
		number of permutation  such that no element appears in its original position.
{
    int n ;
    cin>>n ;
    vector<int> derangement (n+1) ;
    derangement[1]=0 ;
    derangement[2]=1 ;
    for (int i=3 ; i<=n ; i++)
    {
        derangement[i] = ( (derangement[i-1]+derangement[i-2]) * (i-1) )%mod ;
    }
    cout<<derangement[n] ;
}

/////////////////////////////////////////////////////////////////////////////////////////////////
the number of valid bracket sequences if I have n pairs -> []
and if I need the number of valid bracket sequences of length n Just divide n by 2
ll catalan(int n, Combinatorics &comb) {
    // n is number of pairs
    // n = 3
    // ()()() -- ()(()) -- (())()
    // ((())))  -- (()())
    ll res = comb.nCr(2 * n, n) - comb.nCr(2 * n, n - 1);
    res = (res + comb.MOD) % comb.MOD;
    return res;
}
/////////////////////////////////////////////////////////////////////////////////////////////////
// Counting Necklaces
// number of different necklaces that
// consist of n pearls and each pearl has m possible colors.
ll countDistinctWays(ll N, ll M)
{
    ll ans = 0;
    // rotation
    for (ll i = 0; i < N; i++) {
        ll K = __gcd(i, N);
        ans += fpow(M, K);
        ans %= MOD;

    }
    ans *= inv(N);
    ans %= MOD;
    return ans;
}