							  	Easy way
const int MOD = 1e9 + 7;
pair<ll, ll> fib (ll n) {
    if (n == 0)
        return {0, 1};

    auto p = fib(n >> 1);
    ll c = p.first * ((2 * p.second - p.first + MOD) % MOD) % MOD;
    ll d = ((p.first * p.first) % MOD + (p.second * p.second) % MOD) % MOD;
    if (n & 1) return {d, (c + d) % MOD};
    else return {c, d};
}
// fib[0] = fib(0).first = 0;
// fib[3] = fib(3).first;

////////////////////////////////////////////////////////////////////////////////////
				Matrix-Exponentiation  fib[n] in big o(k^3 log n)    , k = 2
const int mod = 1e9 +7 ;
vector<vector<ll>> mult(vector<vector<ll>> a , vector<vector<ll>> b , ll sz )
{
    vector<vector<ll> > res (sz,vector<ll> (sz) )  ;
    for (int r=0 ; r<sz ; r++)
    {
        for (int c=0 ; c<sz ; c++)
        {
            for (int x=0 ; x<sz ; x++)
            {
                res[r][c] = ( res[r][c] + ( a[r][x] * b[x][c])%mod)%mod ;
            }
        }
    }
    return res ;
}
vector<vector<ll>> fpow(vector<vector<ll>> v , ll sz , ll n) // I^n in log n
{
    vector< vector<ll> > I(sz,vector<ll> (sz)) ;
    for (ll i=0 ; i<sz ; i++) I[i][i]=1 ;
    while(n)
    {
        if (n%2!=0) I = mult(I,v,sz) ;
        v = mult(v,v,sz) ;
        n = n/2 ;
    }
    return I ;
}

ll getFib(ll n) {
    n++;   // add it when u need 1 -> fib[1] not fib[0]
    vector<vector<ll>> v = {{0, 1},{0, 0}} , magic = {{0, 1},{1, 1}} ;
    magic = fpow(magic, 2, n-1 );
    v = mult(v, magic, 2);
    return v[0][0];
}