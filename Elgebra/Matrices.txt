//--------------------------------------------------------//
using Matrix = vector<vector<long long>>;
const int MOD = 1e9 + 7;

Matrix zero(int n) {
    return Matrix(n, vector<long long>(n));
}

Matrix mult(Matrix a, Matrix b) {
    int n = a.size();
    Matrix res = zero(n);
    for (int i = 0 ; i < n ; i++) {
        for (int j = 0 ; j < n ; j++) {
            for (int k = 0 ; k < n ; k++) {
                res[i][j] += (a[i][k] * b[k][j]) % MOD;
                res[i][j] %= MOD;
            }
        }
    }
    return res;
}

Matrix identity(int n) {
    Matrix res = zero(n);
    for (int i = 0 ; i < n ; i++) 
        res[i][i] = 1;
    return res;
}

Matrix power(Matrix &a, ll k) {
    int n = a.size();
    if (k == 0) return identity(n);
    if (k == 1) return a;
    Matrix res = power(a, k/2);
    if (k & 1) return mult(a, mult(res, res));
    return mult(res, res);
}

void print(Matrix a) {
    for (auto row : a) {
        for (auto x : row) cout << x <<" ";
        cout << endl;
    }
}
//--------------------------------------------------------//
 
// example
// Matrix init = {{0, 1}, {0, 0}};
// Matrix trans = {{0, 1}, {1, 1}};
// Matrix res = mult(init, power(trans, n));
// big o(N^3 logk) where N is size of each row
// Maximum grid will be atmost 100 * 100 size

/////////////////////////////////////////////////////////////////////////////////////////////
Matrix add(Matrix a, Matrix b) {
    int n = a.size();
    Matrix res = zero(n);
    for (int i = 0 ; i < n ; i++)
        for (int j = 0 ; j < n ; j++) 
            res[i][j] = (res[i][j] + (a[i][j] + b[i][j]) % MOD) % MOD;
    return res;
}

Matrix power_sum(Matrix &x, ll k) { // x^1 + x^2 + .. + x^k
    int n = x.size();
    if (k == 0) return zero(n);
    Matrix subRes = power_sum(x, k / 2);
    Matrix res = mult(subRes, power(x, k/2));
    res = add(res, subRes);
    if (k & 1) res = add(res, power(x, k));
    return res;
}

/////////////////////////////////
ll matrixTrace(matrix x) {
    ll ret = 0;
    lp(i, x.size()) ret += x[i][i];
    return ret;
}

matrix rotate(matrix x) {
    matrix ret = zero(x[0].size(), x.size());
    lp(i, x.size()) {
        lp(j, x[0].size()) {
            ret[j][x.size() - i - 1] = x[i][j];
        }
    }
    return ret;
}
