struct DSU {
    vector<int> par , parSize;

    DSU(int n) {
        par.resize(n + 1);
        parSize.resize(n + 1);
        for (int i = 0 ; i <= n ; i++) par[i] = i;
        for (int i = 0 ; i <= n ; i++) parSize[i] = 1;
    }

    int find(int x) {
        if (x == par[x])
            return x;
        return find(par[x]);
    }

    bool same(int a, int b) {
        return find(a) == find(b);
    }

    int setSize(int x) {
        return parSize[find(x)];
    }

    bool unite(int a, int b) {
        a = find(a);
        b = find(b);
        if (a == b) return false;
        if (parSize[a] < parSize[b]) swap(a, b);
        parSize[a] += parSize[b];
        par[b] = a;
        return true;
    }
};