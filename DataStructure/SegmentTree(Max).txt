class SegmentTree {
public:
    vector<int> tree, lazy;

    SegmentTree(vector<int> &arr, int n) {
        tree.resize(4 * n);
        lazy.resize(4 * n, INT_MIN);
        build(arr, 0, n-1, 0);
    }

    int get(int n, int l, int r) {
        return getUtil(0, n-1, l, r, 0);
    }
    void update(int n, int index, int value) {
        updateUtil(0, 0, n-1, index, value);
    }
    void updateRange(int n, int l, int r, int value) {
        updateRangeUtil(0, 0, n-1, l, r, value);
    }


private:
    void build(vector<int> &arr , int s, int e, int node) {
        if (s > e) return ;
        if (s == e) {
            tree[node] = arr[s]; return;
        }
        int mid = (s + e)/2;
        build(arr, s, mid, node * 2 + 1);
        build(arr, mid+1, e, node * 2 + 2);
        tree[node] = max(tree[node * 2 + 1] , tree[node * 2 + 2]);
    }

    int getUtil(int s, int e, int l, int r, int node) {
        propagate(s, e, node);

        if (s > e || s > r || e < l) return 0;

        if (s >= l && e <= r)
            return tree[node];

        int mid = (s + e) / 2;
        return max(getUtil(s, mid, l, r, 2 * node + 1) ,
               getUtil(mid + 1, e, l, r, 2 * node + 2));
    }

    void updateUtil(int node, int s, int e, int i, int value) {
        if (i < s || i > e) return;

        if (s == e) {
            tree[node] = value; return;
        }

        int mid = (s + e) / 2;
        updateUtil(node * 2 + 1, s, mid, i, value);
        updateUtil(node * 2 + 2, mid + 1, e, i, value);
        tree[node] = max(tree[node * 2 + 1] , tree[node * 2 + 2]);
    }

    void updateRangeUtil(int node, int s, int e, int l, int r, int value){
        propagate(s, e, node);

        if (s > e || s > r || e < l) return ;

        if (s >= l && e <= r) {
            tree[node] = max(tree[node] , value);
            if (s != e) {
                lazy[node * 2 + 1] = max(lazy[node * 2 + 1] , value);
                lazy[node * 2 + 2] = max(lazy[node * 2 + 2] , value);
            }
            return;
        }
        int mid = (s + e)/2;
        updateRangeUtil(node * 2 + 1, s, mid, l, r, value);
        updateRangeUtil(node * 2 + 2, mid+1, e, l, r, value);
        tree[node] = max(tree[node * 2 + 1] , tree[node * 2 + 2]);
    }

    void propagate(int s, int e, int node) {
        if (lazy[node] != INT_MIN) {
            tree[node] = max(tree[node], lazy[node]);
            if (s != e) {
                lazy[node * 2 + 1]  = max(lazy[node * 2 + 1] , lazy[node]);
                lazy[node * 2 + 2]  = max(lazy[node * 2 + 2] , lazy[node]);
            }
            lazy[node] = INT_MIN;
        }
    }
};