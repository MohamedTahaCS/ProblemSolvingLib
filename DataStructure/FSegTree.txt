
const int N = 1 << 20;
const ll GAR = 0;
struct SegTree {
    vi t , lz;
    SegTree() { t.assign(2 * N, 0); lz.assign(2 * N, GAR); }
    void lol(int k, int l, int r) {
        if (lz[k] == GAR) return;
        t[k] += lz[k] * (r - l + 1);
        if(l != r) {
            lz[2*k] += lz[k];
            lz[2*k+1] += lz[k];
        }
        lz[k] = GAR;
    }
    ll update(int x, int y, ll v, int k = 1 , int l = 0, int r = N - 1) {
        lol(k, l, r);
        if(l > y || r < x) return t[k];
        if(x <= l && r <= y) {
            lz[k] = v;
            return t[k] + lz[k] * (r - l + 1);
        }
        int mid = (l+r)>>1;
        ll ch1 = update(x, y, v, k*2, l, mid);
        ll ch2 = update(x, y, v, k*2+1, mid+1, r);
        return t[k] =  ch1 + ch2;
    }
    ll get(int x , int y, int k = 1, int l = 0 , int r = N - 1) {
        lol(k, l, r);
        if(l > y || r < x) return GAR;
        if(x <= l && r <= y) return t[k];
        int mid = (l+r)>>1;
        ll ch1 = get(x, y, k*2, l, mid);
        ll ch2 = get(x, y, k*2+1, mid+1, r);
        return ch1 + ch2;
    }
};