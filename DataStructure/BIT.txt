struct BIT {
    // 1 base
    // lsb -> least significant bit
    // each index store value of this range [i, i - (1<<lsb(idx))[

    vector<int> bit;
 
    BIT(int n) {
        bit.resize(n + 1);
    }
 
    int g(int i) {
        for (int b = 0 ; b < 32 ; b++) {
            if (i & (1 << b)) return (1 << b);
        }
        // both return are valid (equiv)
        return i & -i;
    }
 
    int sum(int i) {     
        int res = 0;
        while(i) {
            res += bit[i];
            i -= g(i);
        }
        return res;
    }
     
    void increase(int i, int delta) {
        while(i < bit.size()) {
            bit[i] += delta;
            i += g(i);
        }
    }
     
    int get(int l, int r) {
        return sum(r) - sum(l - 1);
    }
};

//////////////////////////////////////////////////////////
struct BIT_2D {
    vector<vector<int>> bit;
 
    BIT_2D(int n, int m) {
        bit.resize(n + 1, vector<int> (m + 1));
    }
 
    int g(int i) {
        // for (int b = 0 ; b < 32 ; b++) {
        //     if (i & (1 << b)) return (1 << b);
        // }
        // both return are valid
        return i & -i;
    }
 
    int sum(int r, int c) {     
        int res = 0;
        for (int i = r ; i ; i -= g(i)) {
            for (int j = c ; j ; j -= g(j)) {
                res += bit[i][j];
            }
        }
        return res;
    }

    void increase(int r, int c, int delta) {
        for (int i = r ; i < bit.size() ; i += g(i)) {
            for (int j = c ; j < bit[i].size() ; j += g(j)) {
                bit[i][j] += delta;
            }
        }
    }

    int get(int r, int c, int r2, int c2) {
        return sum(r2, c2) - sum(r-1, c2) - sum(r2, c-1) + sum(r-1, c-1);
    }
};
//////////////////////////////////////////////////////////
// sprase bit2d

int comp(pair<int,int> &a, pair<int,int> &b) {
    return a.second < b.second;
}
struct BIT_2D {
    vector<vector<int>> bit;
    vector<vector<int>> vec;
 
    BIT_2D(int n, vector<pair<int,int>> p) {
        sort(p.begin(), p.end(), comp);
        vec.resize(n + 1);
 
        for (int i = 0 ; i <= n ; i++) vec[i].push_back(0);
        for (auto [x, y] : p) {
            for ( ; x <= n ; x += g(x)) {
                vec[x].push_back(y);
            }
        }
 
        bit.resize(n + 1);
        for (int i = 0 ; i <= n ; i++) {
            bit[i].resize(vec[i].size());
        }
    }
 
    int pos(int r, int y) {
        return upper_bound(vec[r].begin(), vec[r].end(), y) - vec[r].begin() - 1;
    }
 
    int g(int i) {
        // for (int b = 0 ; b < 32 ; b++) {
        //     if (i & (1 << b)) return (1 << b);
        // }
        // both return are valid
        return i & -i;
    }
 
 
 
    int get(int r, int c) {     
        int res = 0;
        
        for (int i = r ; i ; i -= g(i)) {
            for (int j = pos(i, c) ; j ; j -= g(j)) {
                res = max(res, bit[i][j]);
            }
        }
        return res;
    }
 
    void update(int r, int c, int delta) {
        for (int i = r ; i < bit.size() ; i += g(i)) {
            for (int j = pos(i, c) ; j < bit[i].size() ; j += g(j)) {
                bit[i][j] = max(bit[i][j], delta);
            }
        }
    }
 
}; 
///////////////////////////////////////////////////////////
// binary indexed tree -> 0 Base
struct BIT {
    vector<ll> bit;
    int n;

    BIT(int n) {
        this-> n = n;
        bit.resize(n, 0);
    }

    BIT(vector<ll> a) : BIT(a.size()) {
        for (int i = 0; i < a.size(); i++)
            add(i, a[i]);
    }

    ll prefix(int r) {
        ll ret = 0;
        for (; r >= 0; r = (r & (r + 1)) - 1)
            ret += bit[r];
        return ret;
    }

    ll getValue(int l, int r) {
        return prefix(r) - prefix(l - 1);
    }

    void add(int idx, ll delta) {
        for (; idx < n; idx = idx | (idx + 1))
            bit[idx] += delta;
    }
};

////////////////////////////////////////////////////////////////
// 0 base 
struct FenwickTree2D {
    vector<vector<int>> bit;
    int n, m;

    FenwickTree2D(vector<vector<int>> v) {
        n = v.size();
        m = v[0].size();
        bit.resize(n, vector<int> (m));
        for (int i = 0 ; i < n ; i++) {
            for (int j = 0 ; j < m ; j++) {
                add(i, j, v[i][j]);
            }
        }
    }

    int sum(int x, int y) {
        int ret = 0;
        for (int i = x; i >= 0; i = (i & (i + 1)) - 1)
            for (int j = y; j >= 0; j = (j & (j + 1)) - 1)
                ret += bit[i][j];
        return ret;
    }

    void add(int x, int y, int delta) {
        for (int i = x; i < n; i = i | (i + 1))
            for (int j = y; j < m; j = j | (j + 1))
                bit[i][j] += delta;
    }
};
// return sum(r2,c2) - sum(r1 - 1,c2) - sum(r2,c1-1) + sum(r1-1,c1-1);