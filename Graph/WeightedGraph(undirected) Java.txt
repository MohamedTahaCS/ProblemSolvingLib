import java.util.*;
// undirected
public class WeightedGraph {
    private class Node {
        private String label;
        private List<Edge> edges = new ArrayList<>();

        public Node(String label) {
            this.label = label;
        }
        public String toString() {
            return this.label;
        }
        public void addEdge(Node to, int weight) {
            edges.add(new Edge(this,to,weight));
        }
        public List<Edge> getEdges() {
            return edges;
        }
    }
    private class Edge {
        private Node from , to;
        private int weight;
        public Edge(Node from , Node to , int weight) {
            this.from = from;
            this.to = to;
            this.weight = weight;
        }
        public String toString() {
            return ""+from+" -> "+to+" With cost "+weight;
        }
    }
    private Map<String,Node> nodes = new HashMap<>();

    public void addNode(String label) {
        nodes.putIfAbsent(label, new Node(label));
    }
    public void addEdge(String from , String to , int weight) {
        Node fromNode = nodes.get(from);
        Node toNode = nodes.get(to);
        if (fromNode==null || toNode==null) throw new IllegalStateException();
        fromNode.addEdge(toNode,weight);
        toNode.addEdge(fromNode,weight);
    }
    public void print() {
        for (var node : nodes.values()) {
            var target = node.getEdges();
            if (!target.isEmpty()) {
                System.out.println(node + " is connected to " + target);
            }
        }
    }
    private class NodeEntry {
        private Node node;
        private int priority;

        public NodeEntry(Node node, int priority) {
            this.node = node;
            this.priority = priority;
        }
    }
    public Path getShortesPath(String from , String to ) {
        Node fromNode = nodes.get(from);
        Node toNode = nodes.get(to);
        if (fromNode==null || toNode==null) throw new IllegalStateException();

        PriorityQueue<NodeEntry> queue = new PriorityQueue<>(
                Comparator.comparingInt(x -> x.priority)
        );
        Map<Node,Integer> distance = new HashMap<>();
        for (var node : nodes.values()) {
            distance.put(node,Integer.MAX_VALUE);
        }
        Map<Node,Node> previous = new HashMap<>();
        Set<Node> visited = new HashSet<>();


        distance.put(fromNode,0);
        queue.add(new NodeEntry(fromNode,0));
        while(!queue.isEmpty()) {
            Node curr = queue.remove().node;
            if (visited.contains(curr)) continue;
            visited.add(curr);
            for (var edge : curr.getEdges()) {
                if (visited.contains(edge.to)) continue;
                var newDistance = distance.get(curr) + edge.weight;
                if (newDistance < distance.get(edge.to)) {
                    distance.replace(edge.to,newDistance);
                    queue.add(new NodeEntry(edge.to,newDistance));
                    previous.put(edge.to,curr);
                }
            }
        }
        return buildPath(toNode,previous);
        //return distance.get(toNode);
    }
    private Path buildPath(Node toNode , Map<Node,Node> previous) {
        Stack<Node> stack = new Stack<>();
        Node curr = toNode;
        do {
            stack.add(curr);
            curr = previous.get(curr);
        }while(curr!=null);
        Path path = new Path();
        while(!stack.isEmpty()){
            path.add(stack.pop().label);
        }
        return path;
    }
    public class Path {
        private List<String> nodes = new ArrayList<>();
        public void add(String node) {
            nodes.add(node);
        }
        public String toString() {
            return nodes.toString();
        }
    }
    public WeightedGraph getMinimumSpanningTree() {
        WeightedGraph tree = new WeightedGraph();

        if (nodes.isEmpty()) return tree;

        PriorityQueue<Edge> queue = new PriorityQueue<>(Comparator.comparingInt(edge -> edge.weight));
        Node startNode = nodes.values().iterator().next();
        queue.addAll(startNode.edges);
        tree.addNode(startNode.label);

        if (queue.isEmpty()) return tree;

        while(tree.nodes.size()<nodes.size()) {
            var minEdge = queue.remove();
            var nextNode = minEdge.to;
            if (tree.containsNode(nextNode.label)) continue;

            tree.addNode(minEdge.to.label);
            tree.addEdge(minEdge.from.label,minEdge.to.label,minEdge.weight);
            queue.addAll(minEdge.to.getEdges());
            for (var edge : nextNode.getEdges()) {
                if (!tree.containsNode(edge.to.label))
                    queue.add(edge);
            }
        }
        return tree;
    }
    public boolean containsNode(String label) {
        return nodes.containsKey(label);
    }
}
