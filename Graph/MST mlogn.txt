const int INF = 1000000000;
struct edge
{
    int cost = INF , to=-1  ;
    bool operator<(edge const& other) const
    {
        return make_pair(cost, to) < make_pair(other.cost, other.to);
    }
};
int n ; vector<vector<edge>> g ;
int mst ()
{
    int total = 0 ;
    vector <edge> minedge(n) ;
    vector <bool> selected(n) ;
    set <edge> st ;
    minedge[0].cost = 0 ;
    st.insert({0,0}) ;  // to 0 or 1
    for (int i=0 ; i<n ; i++)
    {
        if (st.empty()) return -1 ; // no MST
        int v = st.begin()->to ;
        total += st.begin()->cost ;
        selected[v]=true ;
        st.erase(st.begin()) ;
        for (auto e:g[v]) // I in node v
        {
            int to = e.to ;
            int cost = e.cost ;
            if (!selected[to] && cost<minedge[to].cost)
            {
                st.erase({minedge[to].cost,to}) ;
                minedge[to]={cost,v} ;
                st.insert({cost,to}) ;
            }

        }
    }
    return total ;
}
// if (min_e[v].to != -1) cout << v << " " << min_e[v].to << endl;