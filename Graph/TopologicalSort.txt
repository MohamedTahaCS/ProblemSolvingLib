vector<int> getTopo(int n, vvi adj) {
    vector<int> in(n + 1);
    for (int s = 1 ; s <= n ; s++)
        for (auto v : adj[s])
            in[v]++;

    vector<int> topo;
    queue<int> q;
    for (int i = 1 ; i <= n ; i++) if (in[i] == 0) q.push(i);
    while(q.size()) {
        int s = q.front();
        q.pop();
        topo.push_back(s);
        for (auto v : adj[s]) {
            in[v]--;
            if (in[v] == 0) q.push(v);
        }
    }
    bool isValid = (topo.size() == n);

    if (isValid) return topo;
    else return vector<int> (); // "IMPOSSIBLE"
}
/////////////////////////////////////////////////////////////////////////

struct TopologicalSort {
    vector<vector<int>> adj;
    vector<bool> vis;
    vector<int> topo;
 
    bool isValidTopo = true;
 
    void dfs(int s) {
        if (vis[s])
            return;
 
        vis[s] = true;
        for (auto u : adj[s]) {
            dfs(u);
        }
 
        topo.push_back(s);
    }
 
    TopologicalSort(vector<vector<int>> g , int n) {
        adj = g;
        vis.resize(n + 1);
 
        for (int i = 1 ; i <= n ; i++) {
            if (!vis[i])
                dfs(i);
        }
 
        reverse(topo.begin(), topo.end());
 
        int order[n + 1];
        for (int i = 0 ; i < n ; i++) order[topo[i]] = i;
        for (int s = 1 ; s <= n ; s++) {
            for (auto u : adj[s]) {
                if (order[u] <= order[s])
                    isValidTopo = false;
            }
        }
 
    }
 
};