const ll INF = LONG_LONG_MAX;
vector<vector<ll>> capacity;
vector<vector<int>> adj;

ll bfs(int s, int t, vector<int>& parent) {
    fill(parent.begin(), parent.end(), -1);
    parent[s] = -2;
    queue<pair<int, ll>> q;
    q.push({s, INF});

    while (!q.empty()) {
        int cur = q.front().first;
        ll flow = q.front().second;
        q.pop();

        for (int next : adj[cur]) {
            if (parent[next] == -1 && capacity[cur][next]) {
                parent[next] = cur;
                ll new_flow = min(flow, capacity[cur][next]);
                if (next == t)
                    return new_flow;
                q.push({next, new_flow});
            }
        }
    }

    return 0;
}

ll maxflow(int s, int t) {
    ll flow = 0;
    int n = (int) adj.size();
    vector<int> parent(n);
    ll new_flow;

    while (new_flow = bfs(s, t, parent)) {
        flow += new_flow;
        int cur = t;
        while (cur != s) {
            int prev = parent[cur];
            capacity[prev][cur] -= new_flow;
            capacity[cur][prev] += new_flow;
            cur = prev;
        }
    }

    return flow;
}

////////////// min cut //////////////
vector<bool> vis;
void dfs(int s) {
    vis[s] = true;
    for (auto v : adj[s]) {
        if (vis[v] || capacity[v][s] == 0) continue;
        dfs(v);
    }
}

vector<pair<int,int>> minCut(int s, int t, vector<pair<int,int>> edges) {
    maxflow(s, t);
    vector<pair<int,int>> cut;
    vis.resize(adj.size());
    dfs(t);
    for (auto [x, y]: edges) {
        if (vis[x] != vis[y]) {
            cut.push_back({x, y});
        }
    }
    return cut;
}

////////////////// all different paths ////////////////////
 
 
vector<vector<int>> org;
bool used[501][501];
 
bool go(int s, int t, vector<int> &parent) {
    if (s == t) return true;
 
    bool found = false;
    for (auto v : org[s]) {
        if (parent[v] != -1 || capacity[s][v] != 0 || used[s][v]) continue;
        parent[v] = s;
        found |= go(v, t, parent);
    }
 
    return found;
}
 
vector<vector<int>> getPaths(int s, int t) {
    maxflow(s, t);
    vector<vector<int>> paths;
    vector<int> parent(adj.size(), -1);
    while(go(s, t, parent)) {
        int curr = t;
        vector<int> currPath;
        currPath.push_back(curr);
        while(curr != s) {
            currPath.push_back(parent[curr]);
            used[parent[curr]][curr] = 1;
            curr = parent[curr];
        }
 
        reverse(currPath.begin(), currPath.end());
        paths.push_back(currPath);
        fill(parent.begin(), parent.end(), -1);
    }
    return paths;
}


////////////////////////////  ford algo ///////////////////////////////////////////

// if graph is 1 direction convert it to two direction
// time is big O(N * V^2) 
// capacity is 2D c[n][n]
// 				MinCut
// dfs(sink) 
// in edge (u, v) if  vis[u] != vis[v] then its cut


// code for both : 

void dfs(int s, vector<bool> &vis, vector<vector<int>> &adj, vector<vector<ll>> &cap) {
    vis[s] = true;
    for (auto v : adj[s]) {
        if (!vis[v] && cap[v][s] > 0) {
            dfs(v, vis, adj, cap);
        }
    }
}

void max_flow(vector<vector<int>> &adj, vector<vector<ll>> capacity, int source, int sink, vector<pair<int,int>> edges) {
    int n = (int) adj.size();
    vector<int> parent(n, -1);

    auto reachable = [&](int start) -> bool {
        vector<bool> vis(n);
        queue<int> q;
        q.push(start);
        vis[start] = true;
        while(!q.empty()) {
            int s = q.front();
            q.pop();

            for (auto v : adj[s]) {
                if (vis[v] || capacity[s][v] <= 0) continue;
                q.push(v);
                vis[v] = true;
                parent[v] = s;
                if (v == sink) {
                    return true;
                }
            }
        }

        return false;
    };

    ll maxflow = 0;
    while(reachable(source)) {
        ll flow = LONG_LONG_MAX;
        for (int v = sink ; v != source ; v = parent[v]) {
            int u = parent[v];
            flow = min(flow, capacity[u][v]);
        }

        for (int v = sink ; v != source ; v = parent[v]) {
            int u = parent[v];
            capacity[u][v] -= flow;
            capacity[v][u] += flow;
        }

        maxflow += flow;
    }

    cout << maxflow << endl;
    vector<bool> vis(n);
    dfs(sink, vis, adj, capacity);

    for (auto [u, v] : edges) {
        if (vis[u] != vis[v]) {
            cout << u <<" " << v << endl;
        }
    }
    // return maxflow;
}

