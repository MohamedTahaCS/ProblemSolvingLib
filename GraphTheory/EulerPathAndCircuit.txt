u need check if graph connected or not
						Undirected
class Graph{
    
    int vertex; // number of vertices
    // adjacency list
    // we are using unordered_map to speed up the deletion of edges
    vector<unordered_map<int,int>> adj;
    
    public:
        
        // constructor to initialize graph
        // set number of vertices to v
        // initialize adjacency map for v nodes
        Graph(int v){
            vertex = v;
            adj = vector<unordered_map<int,int>>(v+1);
        }
        
        // add edge (u, v) to graph
        void addEdge(int u, int v){
            adj[u][v] = 1;
            adj[v][u] = 1;
        }
        
        // remove edge (u, v) from the graph
        void removeEdge(int v,int u){
            adj[v].erase(u);
            adj[u].erase(v);
        }
        
        // function checks if the graph contains a euler path/circuit or not
        // if the graph is valid, then it calls another function printEuler()
        // to print Euler Path or circuit
        void printEulerPathCircuit(){
            
            int odd = 0; // number of vertices with odd degree
            int oddVertex = 0; // it stores vertex with odd degree if it exists
            
            for(int i=1;i<=vertex;++i){
                if(adj[i].size()%2==1){
                    ++odd;
                    oddVertex = i;
                }
            }
            
            if(odd==0){
                // if the number of odd degree vertices is 0
                // the graph contains a Euler Circuit
                // we can use any vertex as the starting vertex
                cout<<"Euler Circuit: ";
                // print euler circuit with '1' as the starting vertex
                printEuler(1);
            }
            else if(odd==2){
                // if the number of odd degree vertices is 0
                // the graph contains a Euler Path
                // starting vertex should be of odd degree
                cout<<"Euler Path: ";
                printEuler(oddVertex);
            }
            else{
                cout<<"Euler Path/Circuit Doesn't Exist"<<endl;
            }
            
        }
        
        // the function to print euler path or circuit
        void printEuler(int v){
            
            stack<int> cpath;    // current path
            stack<int> epath;    // euler path
            
            cpath.push(v);        // euler path starts from v
            
            while(!cpath.empty()){
                int u = cpath.top();
                
                if(adj[u].size()==0){
                    // if all edges from u are visited
                    // pop u and push it to euler path    
                    epath.push(u);
                    cpath.pop();
                }
                else{
                    // if all edges from u are not visited
                    // select any edge (u, v)
                    // push v to current path and remove edge (u, v) from the graph
                    cpath.push(adj[u].begin()->first);
                    removeEdge(u,adj[u].begin()->first);
                }    
            }
            
            while(!epath.empty()){
                cout<<" "<<epath.top()<<" ";
                epath.pop();
            }
            
        }
        
};
//////////////////////////////////////////
//////////////////////////////////////////
u need check if graph connected or not
					Directed
class Graph {
    int vertex; // number of vertices
    vector<unordered_map<int, int>> adj; // adjacency list
    // store degree of each vertex
    // negative value means indegree more than outdegree
    // positive value means outdegree more than indegree
    vector<int> degree;
public:
    // constructor to initialize graph
    // set number of vertices to v
    Graph(int v) {
        vertex = v;
        adj = vector<unordered_map<int, int>>(v + 1);
        degree = vector<int>(v + 1, 0);
    }
    // add edge (u, v) to graph
    void addEdge(int u, int v) {
        adj[u][v] = 1;
        degree[u]++;
        degree[v]--;
    }
    // remove edge (u, v) from the graph
    void removeEdge(int u, int v) {
        adj[u].erase(v);
        degree[u]--;
        degree[v]++;
    }
    // function checks if the graph contains a euler path/circuit or not
    // if the graph is valid, then it calls printEuler()
    // to print Euler Path or circuit
    void printEulerPathCircuit() {
        // start : vertex with indegree + 1 = outdegree
        // indeg : number of vertices with indegree 1 more than outdegree
        // outdeg: number of vertices with outdegree 1 more than indegree
        int start, end, indeg, outdeg;
        start = -1;
        indeg = outdeg = 0;
        for (int i = 1; i <= vertex; ++i) {
            if (degree[i] == -1 && indeg == 0) {
                ++indeg;
            }
            else if (degree[i] == 1 && outdeg == 0) {
                ++outdeg;
                start = i;
            }
            else if (degree[i] != 0) {
                cout << "Euler Path/Circuit Doesn't Exist" << endl;
                return;
            }
        }
        if (indeg == 1 && outdeg == 1) {
            // graph contains 1 vertex with indegree = outdegree + 1
            // and 1 vertex with outdegree = indegree + 1
            // thereforce, the graph must contain a euler path
            cout << "Euler Path: ";
            // the euler path starts from vertex with outdegree = indegree + 1
            printEuler(start);
        }
        else {
            // graphs contains all vectices with indegree == outdegree
            // thereforce, the graph must contain a euler circuit
            cout << "Euler Curcuit: ";
            // euler circuit can start from any edge
            printEuler(1);
        }
    }
    // the function to print euler path or circuit
    void printEuler(int v) {
        stack<int> cpath;    // current path
        stack<int> epath;    // euler path
        cpath.push(v);        // euler path starts from v
        while (!cpath.empty()) {
            int u = cpath.top();
            if (adj[u].size() == 0) {
                // if all edges from u are visited
                // pop u and push it to euler path    
                epath.push(u);
                cpath.pop();
            }
            else {
                // if all edges from u are not visited
                // select any edge (u, v)
                // push v to current path and remove edge (u, v) from the graph
                cpath.push(adj[u].begin()->first);
                removeEdge(u, adj[u].begin()->first);
            }
        }
        while (!epath.empty()) {
            cout << " " << epath.top() << " ";
            epath.pop();
        }
    }
};


////////////////////////////////////
struct Graph {
    int n;
    vector<unordered_map<int,int>> adj;
    vector<bool> vis , inPath;

    Graph(int n){
        this->n = n;
        adj = vector<unordered_map<int,int>>(n+1);
        vis.resize(n + 1);
        inPath.resize(n + 1);
    }

    void addEdge(int u, int v){
        inPath[u] = inPath[v] = true;
        adj[u][v] = 1;
        adj[v][u] = 1;
    }

    void removeEdge(int v,int u){
        adj[v].erase(u);
        adj[u].erase(v);
    }

    void dfs(int s) {
        if (vis[s]) return;
        vis[s] = true;
        for (auto v : adj[s]) dfs(v.first);
    }

    bool isConnected(int start) {
        dfs(start);
        for (int i = 1 ; i <= n ; i++)
            if (inPath[i] && !vis[i])
                return false;
        return true;
    }

    void printEulerPathCircuit(){
        if (!isConnected(1)) {
            cout << "IMPOSSIBLE" ;
            return ;
        }

        int odd = 0;
        int oddVertex = 0;

        for(int i=1; i<=n; ++i){
            if(adj[i].size()%2==1){
                ++odd;
                oddVertex = i;
            }
        }

        if(odd==0) {
            printEuler(1);
        }
        else if (odd == 2) {
            cout << "IMPOSSIBLE";
            //printEuler(oddVertex);
        }
        else cout << "IMPOSSIBLE" ;

    }

    void printEuler(int v){

        stack<int> cpath;
        stack<int> epath;

        cpath.push(v);

        while(!cpath.empty()){
            int u = cpath.top();

            if(adj[u].size()==0){
                epath.push(u);
                cpath.pop();
            }
            else {
                cpath.push(adj[u].begin()->first);
                removeEdge(u,adj[u].begin()->first);
            }
        }

        while(!epath.empty()){
            cout<<epath.top()<<" ";
            epath.pop();
        }

    }

};
////////////////////////////

#include <bits/stdc++.h>
using namespace std ;

#define fast ios_base::sync_with_stdio(false);
#define ll long long
#define ar array

const int N = 2e5 + 5;
int n , m;
set<int> adj[N];
vector<bool> vis(N) , isInput(N);

void dfs(int s) {
    if (vis[s])
        return;
    vis[s] = true;
    for (auto v : adj[s]) {
        dfs(v);
    }
}

bool isConnected() {
    dfs(1);
    for (int i = 1 ; i <= n ; i++) {
        if (!vis[i] && isInput[i])
            return false;
    }
    return true;
}

bool isEulerianCircuit() {
    int odd = 0;
    for (int i = 1 ; i <= n ; i++) {
        int deg = adj[i].size();
        if (deg & 1) odd++;
    }
    return (odd == 0) && isConnected();
}

vector<int> getEuler(int s) {
    vector<int> circuit;

    stack<int> st;
    int curr = 1;
    st.push(curr);

    while(!st.empty()) {
        if (adj[curr].size()) {
            st.push(curr);

            int next = *adj[curr].begin();
            adj[curr].erase(adj[curr].find(next));
            adj[next].erase(adj[next].find(curr));

            curr = next;
        }
        else {
            circuit.push_back(curr);

            curr = st.top();
            st.pop();
        }
    }

    reverse(circuit.begin(), circuit.end());
    return circuit;
}


//////////////////////////////
//////////////////////////////