struct TreeAncestor {
    ll LOG = 30 , N;
    vector<vector<int>> adj;
    vector<int> par , depth;
    vector<vector<ll>> up;
 
    TreeAncestor(vector<vector<int>> adj) {
        N = adj.size();
        this -> adj = adj;
        depth.resize(N);
        par.resize(N);
 
        dfs(1, 0); // only work if 1 is the root
 
        up.resize(LOG, vector<ll> (N));
        for (int i = 0 ; i < N ; i++) up[0][i] = par[i];
        for (int j = 1 ; j < LOG ; j++) {
            for (int i = 0 ; i < N ; i++) {
                up[j][i] = up[j-1][ up[j-1][i] ];
            }
        }
 
    }
 
    void dfs(int s, int p) {
        for (auto u : adj[s]) {
            if (u == p) continue;
            par[u] = s;
            depth[u] = depth[s] + 1;
            dfs(u, s);
        }
    }
 
    int kPar(int x, int k) {
        for (int j = 0 ; j < LOG ; j++)
            if (k & (1ll<<j))
                x = up[j][x];
        return x;
    }
 
    int lca(int a, int b) {
        if (depth[a] < depth[b]) swap(a, b);
        int f = depth[a] - depth[b];
        a = kPar(a, f);
 
        if (a == b) return a;
 
        // up not kPar
        for (int k = LOG - 1 ; k >= 0 ; k--) {
            if (up[k][a] != up[k][b]) {
                a = up[k][a];
                b = up[k][b];
            }
        }
        return up[0][a];
    }
};